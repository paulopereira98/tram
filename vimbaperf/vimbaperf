#!/usr/bin/env python3

"""BSD 2-Clause License

Copyright (c) 2019, Allied Vision Technologies GmbH
All rights reserved.

Copyright (c) 2022, Paulo Pereira, UMinho
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""


import sys
import cv2
from typing import Optional
from vimba import *
from vimba.c_binding import vimba_c
import argparse
import time
from datetime import datetime
import random
import string
import os
import math

import vimbastats as vs
from vimbacamperf import *

USEC_IN_SEC = 1000000
NSEC_IN_SEC = 1000000000
NSEC_IN_MSEC = 1000000

VIDEO_TMP_FILE = "/tmp/vimbaperf"


def print_preamble():
    print('///////////////////////////////////////////////////////')
    print('///                 Vimba Net Perf                  ///')
    print('///////////////////////////////////////////////////////\n')


def abort(reason: str, return_code: int = 1):
    print(reason + '\n')

    sys.exit(return_code)


def get_camera(camera_id: Optional[str]) -> Camera:
    with Vimba.get_instance() as vimba:
        if camera_id:
            try:
                return vimba.get_camera_by_id(camera_id)

            except VimbaCameraError:
                abort('Failed to access Camera \'{}\'. Abort.'.format(camera_id))

        else:
            cams = vimba.get_all_cameras()
            if not cams:
                abort('No Cameras accessible. Abort.')

            return cams[0]


def setup_camera(cam: Camera, fps: int, decimation:int):

    #AcquisitionFrameRateAbs = fps
    #PixelFormat = BayerRG8
    #GainAuto = Continuous
    #ExposureAuto = Off
    #ExposureTimeAbs = 900000/fps  # useconds * 50%

    # clamp decimation between 1 and 8
    decimation = decimation if decimation <= 8 else 8
    decimation = decimation if decimation >  1 else 1
    with cam:
        # Enable auto exposure time setting if camera supports it
        try:
            cam.ExposureAuto.set('Off')
            cam.ExposureTimeAbs.set(int((0.5*USEC_IN_SEC)/fps))
            cam.GainAuto.set('Once')
        except (AttributeError, VimbaFeatureError):
            pass

        # Enable white balancing if camera supports it
        try:
            cam.BalanceWhiteAuto.set('Once')

        except (AttributeError, VimbaFeatureError):
            pass

        #set framerate
        try:
            cam.set_pixel_format(PixelFormat.BayerRG8)
            cam.TriggerSource.set('FixedRate')
            cam.AcquisitionFrameRateAbs.set(fps)
        except (AttributeError, VimbaFeatureError):
            pass

        # resolution
        try:
            # set binning or decimation
            cam.BinningHorizontal.set(decimation)
            cam.BinningVertical.set(decimation)
            #cam.DecimationHorizontal.set(decimation)
            #cam.DecimationVertical.set(decimation)

            # set maximum resolution possible with current binning settings
            cam.Width.set( cam.WidthMax.get() )
            cam.Height.set( cam.HeightMax.get() )
        except (AttributeError, VimbaFeatureError):
            pass

        # get resolution
        try:
            width = cam.Width.get()
            height = cam.Height.get()
        except (AttributeError, VimbaFeatureError):
            pass
    
    return [width, height]




def list_cameras():

    with Vimba.get_instance() as vimba:
        cams = vimba.get_all_cameras()
        print('Cameras found: {}'.format(len(cams)))
        index=0
        for cam in cams:
            print('\n/// Index         : {}'.format(index))
            print('/// Camera Name   : {}'.format(cam.get_name()))
            print('/// Model Name    : {}'.format(cam.get_model()))
            print('/// Camera ID     : {}'.format(cam.get_id()))
            print('/// Serial Number : {}'.format(cam.get_serial()))
            print('/// Interface ID  : {}'.format(cam.get_interface_id()))
            index+=1
            try:
                with cam:
                    #print (cam.get_pixel_format())
                    fmts=cam.get_pixel_formats()
                    print('/// Fixel Formats : {}'.format(fmts))
                    print('/// PTP status    : {}\n'.format(cam.PtpStatus.get()))

            except (VimbaCameraError):
                print('/// Camera not accessible')


def setup_parser():
    parser = argparse.ArgumentParser(description='Vimba tester.')
    parser.add_argument('-l', "--list", dest='list_mode', action="store_true",
                        help='List cameras')
    parser.add_argument('-s', "--stealth", dest='stealth_mode', action="store_true",
                        help='Stealth mode, does\'t display video (saves cpu)')
    parser.add_argument('-f', "--frameRate", default=10, type=float, metavar='FPS', 
                        help='Target framerate (default 10 fps)')
    parser.add_argument('-d', "--decimation", default=1, type=int, metavar='FACTOR', 
                        help='On-camera image decimation factor. between 1 and 8 (default = 1)')
    parser.add_argument('-c', "--cameraID", default=[], type=str, metavar='ID', action='append',
                        help='Camera id. More than one can be used (ex: -c id0 -c id1)')
    parser.add_argument('-i', "--index", default=[], type=int, metavar='#', action='append',
                        help='Camera index (default 0). More than one can be used (ex: -i0 -i1)')
    parser.add_argument('-t', "--time", default=0, type=int, metavar='s',
                        help='Duration in time (default = 0 freerun)')
    parser.add_argument('-o', "--outputFile", default="", type=str, metavar='name',
                        help='save stream to video file (name_id_ISO8601.mp4)')
    return parser


def main():

    parser = setup_parser()
    args = parser.parse_args()
    
    print_preamble()
    if args.list_mode:
        list_cameras()
        return 0
    if args.stealth_mode and not args.time:
        print("Timeout is required when running in stealth mode")
        return -1

    cam_ids :list = args.cameraID
    cam_indexes :list = args.index

    cam_objs :dict[CamPerf] = {}

    grabbers :dict[FrameGrabber] = {}
    frame_queue = queue.Queue(maxsize=FRAME_QUEUE_SIZE)


    with Vimba.get_instance() as vimba:

        # if no camera specified, use index 0
        if ( len(cam_ids) + len(cam_indexes) ) == 0:
            cam_indexes.append(0)

        # add cameras by id
        for id in cam_ids:
            cam_obj = CamPerf(vimba.get_camera_by_id(id), id)
            cam_objs[cam_obj.cam_str_id] = cam_obj
        
        # add cameras by index
        if len(cam_indexes) != 0:
            aux_cams = vimba.get_all_cameras()
            for index in cam_indexes:
                auxcam = aux_cams[index]
                cam_obj = CamPerf(auxcam, auxcam.get_name() + '-' + str(index))
                cam_objs[cam_obj.cam_str_id] = cam_obj


        # setup cameras
        for cam_obj in cam_objs.values():

            # create video
            cam_obj.video = 0
            if(args.outputFile != ''):
                cam_obj.video_tmp_name = VIDEO_TMP_FILE\
                                + ''.join(random.choice(string.ascii_lowercase) for _ in range(10))\
                                + '.mp4'
                cam_obj.video = cv2.VideoWriter()


            with cam_obj.cam as cam:

                resolution = setup_camera(cam, args.frameRate, args.decimation)

                # setup video
                if(cam_obj.video):
                    cam_obj.video = cv2.VideoWriter(cam_obj.video_tmp_name, 
                                            cv2.VideoWriter_fourcc('m','p','4','v'), 10, resolution)
                
                ptp_status = str(cam.PtpStatus.get())
                if ptp_status not in ["Slave", "Master"]:
                    print(f"Camera {cam_obj.cam_str_id} not synchronized, PTP status: ", ptp_status)
                    print(f"Camera {cam_obj.cam_str_id}: Setting PTP mode to Slave")
                    cam.PtpMode.set("Slave")
                else:
                    print(f"Camera {cam_obj.cam_str_id} synchronized in {ptp_status} mode")
        

            # create frame grabber threads
            grabbers[cam_obj.cam_str_id] = FrameGrabber(cam_obj, frame_queue, 
                                                        args.stealth_mode, args.time)

        # create frame displayer thread
        displayer = FrameDisplayer(frame_queue, cam_objs, args.stealth_mode)
        
        # start FrameGrabber threads
        now = time.time_ns()
        trigger_stamp = now - (now % NSEC_IN_SEC) + (2*NSEC_IN_SEC)
        #trigger_stamp = now + NSEC_IN_SEC # 1 second from now
        for grabber in grabbers.values():
            grabber.trigger_stamp = trigger_stamp
            grabber.start()

        # start and wait for consumer to terminate
        displayer.start()
        displayer.join()

        # Stop all FrameGrabber threads
        for grabber in grabbers.values():
            grabber.stop()

        # Wait for shutdown to complete
        for grabber in grabbers.values():
            grabber.join()


        #close video
        for cam_obj in cam_objs.values():
            if(cam_obj.video):
                cam_obj.video.release()
                begin_stamp = cam_obj.stats.cam_stamps[0]
                aux = begin_stamp/NSEC_IN_SEC
                start_time = datetime.fromtimestamp(math.floor( aux ))
                # ISO 8601 format
                timestamp = f'{start_time.isoformat()}.{str(begin_stamp%NSEC_IN_SEC) :0>9}Z'
                os.rename(cam_obj.video_tmp_name, 
                            args.outputFile + '_' + cam_obj.cam_str_id + '_' + timestamp + '.mp4')
                            

    #print stats:
    for cam_obj in cam_objs.values():
        print(f'\n///////////////////{cam_obj.cam_str_id :^16}////////////////////')
        cam_obj.stats.process()
        cam_obj.stats.print(sys.stdout)

        

if __name__ == '__main__':
    main()

