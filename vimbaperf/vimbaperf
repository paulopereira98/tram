#!/usr/bin/env python3

"""BSD 2-Clause License

Copyright (c) 2019, Allied Vision Technologies GmbH
All rights reserved.

Copyright (c) 2022, Paulo Pereira, UMinho
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""


import threading
import sys
import cv2
from typing import Optional
from vimba import *
from vimba.c_binding import vimba_c
import argparse
import statistics
import time

USEC_IN_SEC = 1000000
NSEC_IN_SEC = 1000000000
NSEC_IN_MSEC = 1000000

cam_stamps = []
loc_stamps = []

def print_preamble():
    print('///////////////////////////////////////////////////////')
    print('///                 Vimba Net Perf                  ///')
    print('///////////////////////////////////////////////////////\n')


def abort(reason: str, return_code: int = 1):
    print(reason + '\n')

    sys.exit(return_code)


def get_camera(camera_id: Optional[str]) -> Camera:
    with Vimba.get_instance() as vimba:
        if camera_id:
            try:
                return vimba.get_camera_by_id(camera_id)

            except VimbaCameraError:
                abort('Failed to access Camera \'{}\'. Abort.'.format(camera_id))

        else:
            cams = vimba.get_all_cameras()
            if not cams:
                abort('No Cameras accessible. Abort.')

            return cams[0]


def setup_camera(cam: Camera, fps: int):

    #AcquisitionFrameRateAbs = fps
    #PixelFormat = BayerRG8
    #GainAuto = Continuous
    #ExposureAuto = Off
    #ExposureTimeAbs = 900000/fps  # useconds * 50%
    
    with cam:
        # Enable auto exposure time setting if camera supports it
        try:
            cam.ExposureAuto.set('Off')
            cam.ExposureTimeAbs.set(int((0.5*USEC_IN_SEC)/fps))
            cam.GainAuto.set('Once')
        except (AttributeError, VimbaFeatureError):
            pass

        # Enable white balancing if camera supports it
        try:
            cam.BalanceWhiteAuto.set('Once')

        except (AttributeError, VimbaFeatureError):
            pass

        #set framerate
        try:
            cam.set_pixel_format(PixelFormat.BayerRG8)
            cam.TriggerSource.set('FixedRate')
            cam.AcquisitionFrameRateAbs.set(fps)
        except (AttributeError, VimbaFeatureError):
            pass





class Handler:
    def __init__(self, camname):
        self.shutdown_event = threading.Event()
        self.last = 0
        self.camname = camname
        

    def __call__(self, cam: Camera, frame: Frame):
        global stealth_mode, cam_stamps, loc_stamps
        

        if frame.get_status() == FrameStatus.Complete:
            
            local = time.time_ns()
            current = frame.get_timestamp()

            # ignore first frame
            # somme cameras send the first frame with the wrong timestamp
            if self.last==0:
                self.last = current
                return

            cam_stamps.append(current)
            loc_stamps.append(local)

            if (not stealth_mode) or self.video:

                frame_cv2 = frame.as_numpy_ndarray()
                #frame.convert_pixel_format(PixelFormat.Bgr8)
                frame_cv2 = cv2.cvtColor(frame_cv2, cv2.COLOR_BAYER_RG2RGB)

                if not stealth_mode:
                    
                    delta = current-self.last

                    transit = (local - current)/NSEC_IN_MSEC

                    fps =  NSEC_IN_SEC/delta if delta else 0
                    #print('{} acquired {} timestamp {} delta {} fps {}'.format(cam, frame, self.last, delta/NSEC_IN_MSEC, fps), flush=True)
                    print('Frame {:4} timestamp {} loc {} transint {:8.2f} delta {:8.4f} fps {:8.4f}'.format(
                        frame.get_id(), current, local, transit, delta/NSEC_IN_MSEC, fps), flush=True)
                    self.last = current

                    msg = 'Stream from \'{}\''.format(self.camname)
                    cv2.namedWindow(msg, cv2.WINDOW_NORMAL)
                    cv2.imshow(msg, frame_cv2)

                    cv2.waitKey(1)
                    if cv2.getWindowProperty(msg, cv2.WND_PROP_VISIBLE) < 1:
                        self.shutdown_event.set()


            cam.queue_frame(frame)



def list_cameras():

    with Vimba.get_instance() as vimba:
        cams = vimba.get_all_cameras()
        print('Cameras found: {}'.format(len(cams)))
        index=0
        for cam in cams:
            print('\n/// Index         : {}'.format(index))
            print('/// Camera Name   : {}'.format(cam.get_name()))
            print('/// Model Name    : {}'.format(cam.get_model()))
            print('/// Camera ID     : {}'.format(cam.get_id()))
            print('/// Serial Number : {}'.format(cam.get_serial()))
            print('/// Interface ID  : {}'.format(cam.get_interface_id()))
            index+=1
            try:
                with cam:
                    #print (cam.get_pixel_format())
                    fmts=cam.get_pixel_formats()
                    print('/// Fixel Formats : {}'.format(fmts))
                    print('/// PTP status    : {}\n'.format(cam.PtpStatus.get()))

            except (VimbaCameraError):
                print('/// Camera not accessible')


def setup_parser():
    parser = argparse.ArgumentParser(description='Vimba tester.')
    parser.add_argument('-l', "--list", dest='list_mode', action="store_true",
                        help='list cameras')
    parser.add_argument('-s', "--stealth", dest='stealth_mode', action="store_true",
                        help='stealth mode, does\'t display video (saves cpu)')
    parser.add_argument('-f', "--frameRate", default=10, type=int, 
                        help='target framerate (default 10 fps)')
    parser.add_argument('-c', "--cameraID", default="", type=str, metavar='ID',
                        help='camera id (overrides index)')
    parser.add_argument('-i', "--index", default=0, type=int, metavar='#',
                        help='camera index (default 0)')
    parser.add_argument('-t', "--time", default=0, type=int, metavar='s',
                        help='duration in time (default = 0 freerun)')
    return parser

def print_statistics():
    #cam Statistics
    deltas = [cam_stamps[n]-cam_stamps[n-1] for n in range(1,len(cam_stamps))]
    fps =  [NSEC_IN_SEC/deltas[n] for n in range(0,len(deltas))]

    print("\nCamera")
    print(f"Frame count : {len(cam_stamps)}")
    print(f"Delta mean  : {statistics.mean(deltas)/NSEC_IN_MSEC :10.6f} ms")
    print(f"Delta stdev : {statistics.stdev(deltas)/NSEC_IN_SEC :10.6f} ms")
    print(f"Fps mean    : {statistics.mean(fps)    :10.6f} fps")
    print(f"Fps stdev   : {statistics.stdev(fps)   :10.6f} Hz")

    #loc Statistics
    deltas = [loc_stamps[n]-loc_stamps[n-1] for n in range(1,len(loc_stamps))]
    fps =  [NSEC_IN_SEC/deltas[n] for n in range(0,len(deltas))]

    print("\nLocal")
    print(f"Frame count : {len(loc_stamps)}")
    print(f"Delta mean  : {statistics.mean(deltas)/NSEC_IN_MSEC :10.6f} ms")
    print(f"Delta stdev : {statistics.stdev(deltas)/NSEC_IN_SEC :10.6f} ms")
    print(f"Fps mean    : {statistics.mean(fps)    :10.6f} fps")
    print(f"Fps stdev   : {statistics.stdev(fps)   :10.6f} Hz")

    #travel Statistics
    #ignore first
    travel_times = [loc_stamps[n]-cam_stamps[n] for n in range(1,len(cam_stamps))]

    print("\nTravel")
    print(f"Frame count : {len(travel_times)}")
    print(f"Delta mean  : {statistics.mean(travel_times)/NSEC_IN_MSEC :10.6f} ms")
    print(f"Delta stdev : {statistics.stdev(travel_times)/NSEC_IN_SEC :10.6f} ms")

def print_cam_stats(cam: Camera):
    with cam:
        print("Stat Frame Rate         :", cam.StatFrameRate.get())
        print("Stat Frames Delivered   :", cam.StatFrameDelivered.get()) 
        print("Stat Frames Dropped     :", cam.StatFrameDropped.get()) 
        print("Stat Frames Rescued     :", cam.StatFrameRescued.get())
        print("Stat Frames Shoved      :", cam.StatFrameShoved.get())
        print("Stat Frames Underrun    :", cam.StatFrameUnderrun.get())
        print("Stat Local Rate         :", cam.StatLocalRate.get())    
        print("Stat Packets Errors     :", cam.StatPacketErrors.get())         
        print("Stat Packets Missed     :", cam.StatPacketMissed.get())         
        print("Stat Packets Received   :", cam.StatPacketReceived.get())             
        print("Stat Packets Requested  :", cam.StatPacketRequested.get())       
        print("Stat Packets Resent     :", cam.StatPacketResent.get())      
        print("Stat Packets Unavailable:", cam.StatPacketUnavailable.get())           
        print("Stat Time Elapsed       :", cam.StatTimeElapsed.get()) 

def main():
    global stealth_mode, cam_stamps, loc_stamps

    parser = setup_parser()
    args = parser.parse_args()
    
    print_preamble()
    if args.list_mode:
        list_cameras()
        return 0

    stealth_mode = args.stealth_mode

    cam_id = args.cameraID

    cam_stamps.clear()
    loc_stamps.clear()

    if cam_id == "":
        with Vimba.get_instance() as vimba:
            cams = vimba.get_all_cameras()
            cam_id = cams[args.index].get_id()

    with Vimba.get_instance():
        try:
            with get_camera(cam_id) as cam:

                setup_camera(cam, args.frameRate)
                handler = Handler(cam.get_name())

                ptp_status = str(cam.PtpStatus.get())
                if ptp_status not in ["Slave", "Master"]:
                    print(f"Camera {cam.get_name()} not synchronized, PTP status: ", ptp_status)
                    print(f"Setting PTP mode to Slave")
                    cam.PtpMode.set("Slave")
                else:
                    print(f"Camera {cam.get_name()} synchronized in {ptp_status} mode")

                try:
                    cam.start_streaming(handler=handler, buffer_count=10)
                    handler.shutdown_event.wait(args.time if args.time else None)
                finally:
                    cam.stop_streaming()        

                    print_cam_stats(cam) 

        except (VimbaCameraError):
            print("Error: Camera not accessible!")
            return
            
        
    print_statistics()



if __name__ == '__main__':
    main()

